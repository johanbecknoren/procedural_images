#version 430 core

//define num of CPs in output patch
layout (vertices = 3) out;

uniform vec3 camPos;

in VertexData {
	vec3 world_pos_tcs;
} TCSIn[];

out TCSData {
	vec3 world_pos_tes;
} TCSOut[];

float GetTessLevel(float Distance0, float Distance1)
{
	return 3.0f; // for debugging

    float AvgDistance = (Distance0 + Distance1) / 2.0;

    if (AvgDistance <= 2.0) {
        return 10.0;
    }
    else if (AvgDistance <= 5.0) {
        return 7.0;
    }
    else {
        return 3.0;
    }
}

void main(void) {
	// Distance from camera to each control point (vertex)
	float eyeToVert0 = distance(camPos, TCSOut[0].world_pos_tes);
	float eyeToVert1 = distance(camPos, TCSOut[1].world_pos_tes);
	float eyeToVert2 = distance(camPos, TCSOut[2].world_pos_tes);

	// Decide tessellation levels
	if(gl_InvocationID == 0)
	{
		gl_TessLevelOuter[0] = 3.0f;//GetTessLevel(eyeToVert1, eyeToVert2);
		gl_TessLevelOuter[1] = 3.0f;//GetTessLevel(eyeToVert2, eyeToVert0);
		gl_TessLevelOuter[2] = 3.0f;//GetTessLevel(eyeToVert0, eyeToVert1);

		gl_TessLevelInner[0] = gl_TessLevelOuter[2];
	}

	// Set control points for output patch
	//TCSOut[gl_InvocationID].world_pos_tes = TCSIn[gl_InvocationID].world_pos_tcs;
	gl_out[gl_InvocationID].gl_Position	= gl_in[gl_InvocationID].gl_Position;
}